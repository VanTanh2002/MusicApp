// Generated by view binder compiler. Do not edit!
package com.poupa.vinylmusicplayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.ksoichiro.android.observablescrollview.ObservableScrollView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.poupa.vinylmusicplayer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySongTagEditorBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final EditText artist;

  @NonNull
  public final EditText discNumber;

  @NonNull
  public final LinearLayout editables;

  @NonNull
  public final EditText genre;

  @NonNull
  public final LinearLayout header;

  @NonNull
  public final ImageView image;

  @NonNull
  public final EditText lyrics;

  @NonNull
  public final ObservableScrollView observableScrollView;

  @NonNull
  public final FloatingActionButton playPauseFab;

  @NonNull
  public final EditText title1;

  @NonNull
  public final EditText title2;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final EditText trackNumber;

  @NonNull
  public final EditText year;

  private ActivitySongTagEditorBinding(@NonNull FrameLayout rootView, @NonNull EditText artist,
      @NonNull EditText discNumber, @NonNull LinearLayout editables, @NonNull EditText genre,
      @NonNull LinearLayout header, @NonNull ImageView image, @NonNull EditText lyrics,
      @NonNull ObservableScrollView observableScrollView,
      @NonNull FloatingActionButton playPauseFab, @NonNull EditText title1,
      @NonNull EditText title2, @NonNull Toolbar toolbar, @NonNull EditText trackNumber,
      @NonNull EditText year) {
    this.rootView = rootView;
    this.artist = artist;
    this.discNumber = discNumber;
    this.editables = editables;
    this.genre = genre;
    this.header = header;
    this.image = image;
    this.lyrics = lyrics;
    this.observableScrollView = observableScrollView;
    this.playPauseFab = playPauseFab;
    this.title1 = title1;
    this.title2 = title2;
    this.toolbar = toolbar;
    this.trackNumber = trackNumber;
    this.year = year;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySongTagEditorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySongTagEditorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_song_tag_editor, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySongTagEditorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.artist;
      EditText artist = ViewBindings.findChildViewById(rootView, id);
      if (artist == null) {
        break missingId;
      }

      id = R.id.disc_number;
      EditText discNumber = ViewBindings.findChildViewById(rootView, id);
      if (discNumber == null) {
        break missingId;
      }

      id = R.id.editables;
      LinearLayout editables = ViewBindings.findChildViewById(rootView, id);
      if (editables == null) {
        break missingId;
      }

      id = R.id.genre;
      EditText genre = ViewBindings.findChildViewById(rootView, id);
      if (genre == null) {
        break missingId;
      }

      id = R.id.header;
      LinearLayout header = ViewBindings.findChildViewById(rootView, id);
      if (header == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.lyrics;
      EditText lyrics = ViewBindings.findChildViewById(rootView, id);
      if (lyrics == null) {
        break missingId;
      }

      id = R.id.observableScrollView;
      ObservableScrollView observableScrollView = ViewBindings.findChildViewById(rootView, id);
      if (observableScrollView == null) {
        break missingId;
      }

      id = R.id.play_pause_fab;
      FloatingActionButton playPauseFab = ViewBindings.findChildViewById(rootView, id);
      if (playPauseFab == null) {
        break missingId;
      }

      id = R.id.title1;
      EditText title1 = ViewBindings.findChildViewById(rootView, id);
      if (title1 == null) {
        break missingId;
      }

      id = R.id.title2;
      EditText title2 = ViewBindings.findChildViewById(rootView, id);
      if (title2 == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.track_number;
      EditText trackNumber = ViewBindings.findChildViewById(rootView, id);
      if (trackNumber == null) {
        break missingId;
      }

      id = R.id.year;
      EditText year = ViewBindings.findChildViewById(rootView, id);
      if (year == null) {
        break missingId;
      }

      return new ActivitySongTagEditorBinding((FrameLayout) rootView, artist, discNumber, editables,
          genre, header, image, lyrics, observableScrollView, playPauseFab, title1, title2, toolbar,
          trackNumber, year);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
